## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files <- list.files(directory)                           # create list of files
final <- data.frame(id = integer(), nobs = integer())   # initialize empty dataframe
for (i in files) {
x <- 1                                             #index counter to loop through id vector
df <- read.csv(i)
file_id <- id[x]
file_nobs <- sum(complete.cases(df))
final <- rbind(final,data.frame(id = file_id, nobs = file_nobs))
x <- x + 1
}
return(final)
}
complete('specdata')
setwd("~/coursera/computing_data_analysis/week2/programming_assignment1/specdata")
complete('specdata')
files
complete('specdata')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files <- list.files(directory)                           # create list of files
final <- data.frame(id = integer(), nobs = integer())   # initialize empty dataframe
for (i in files) {
x <- 1                                             #index counter to loop through id vector
df <- read.csv(i)
file_id <- id[x]
file_nobs <- sum(complete.cases(df))
final <- rbind(final,data.frame(id = file_id, nobs = file_nobs))
x <- x + 1
}
return(final)
}
complete('specdata')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files <- list.files(directory)                           # create list of files
final <- data.frame(id = integer(), nobs = integer())   # initialize empty dataframe
for (i in files) {
x <- 1                                             #index counter to loop through id vector
df <- read.csv(i)
file_id <- id[x]
file_nobs <- sum(complete.cases(df))
final <- rbind(final,data.frame(id = file_id, nobs = file_nobs))
x <- x + 1
}
print(files)
return(final)
}
complete('specdata')
getwd()
setwd(..)
setwd(..)
setwd('..)
setwd('..')
setwd('..')
getwd()
list.files('specdata')
files <- list.files('specdata')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files <- list.files(directory)                           # create list of files
print(files)
final <- data.frame(id = integer(), nobs = integer())   # initialize empty dataframe
for (i in files) {
x <- 1                                             #index counter to loop through id vector
df <- read.csv(i)
file_id <- id[x]
file_nobs <- sum(complete.cases(df))
final <- rbind(final,data.frame(id = file_id, nobs = file_nobs))
x <- x + 1
}
print(files)
return(final)
}
complete('specdata')
source('getmonitor.R')
source('getmonitor.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
final <- data.frame(id = integer(), nobs = integer())
for (i in id){
df <-getmonitor(directory,i)
nobs <- sum(complete.cases(df))
findal <- rbind(final, data.frame(id = i, nobs = nobs))
}
return(final)
}
complete('specdata',1)
getmonitor('specdata', 1)
source('getmonitor.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
final <- data.frame(id = integer(), nobs = integer())
for (i in id){
df <-getmonitor(id = i, directory)
nobs <- sum(complete.cases(df))
findal <- rbind(final, data.frame(id = i, nobs = nobs))
}
return(final)
}
getmonitor('specdata', 1)
getmonitor(1, 'specdata')
source('getmonitor.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
final <- data.frame(id = integer(), nobs = integer())
for (i in id){
df <-getmonitor(id = i, directory)
nobs <- sum(complete.cases(df))
findal <- rbind(final, data.frame(id = i, nobs = nobs))
}
return(final)
}
complete('specdata',1)
complete('specdata',2)
source('getmonitor.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
final <- data.frame(id = integer(), nobs = integer())
for (i in id){
df <-getmonitor(id = i, directory)
nobs <- sum(complete.cases(df))
final <- rbind(final, data.frame(id = i, nobs = nobs))
}
return(final)
}
complete('specdata',2)
complete('specdata',1:10)
source('getmonitor.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
final <- data.frame(id = integer(), nobs = integer())  # initialize an empty dataframe
for (i in id){
df <-getmonitor(id = i, directory)                  # getmonitor reads the file with the specified id and returns it as a dataframe
nobs <- sum(complete.cases(df))
final <- rbind(final, data.frame(id = i, nobs = nobs))
}
return(final)
}
source("http://spark-public.s3.amazonaws.com/compdata/scripts/complete-test.R")
complete.testscript()
?cor
x <- c(1,2,3,4)
y <- c(5,6,7,8)
cor(x,y)
source('complete.R','getmonitor.R')
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
}
source('complete.R','getmonitor.R')
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
completeDf <- complete('specdata')
return(completeDf)
}
corr()
df <- corr()
df
df[df,2 > 40]
df[df[,2 > 40]]
df$id[df[,2 > 40]]
[df[,2 > 40]
[df[,2] > 40]
df[,2] > 40]
df[,2] > 40
df$id[df[,2] > 40]]
df[,2] > 40
pred <-df[,2] > 40
subset(df,pred)
df$id[pred]
x <- df$id[pred]
x
df[,2] > 500
df[,2] > 500
[df[,2] > 500]
pred <-df[,2] > 500]
pred <-df[,2] > 500
pred
df[,1][pred]
df
df <- read.csv('specdata/100.csv')
df
cor(df)
df <- read.csv('specdata/100.csv', headers = TRUE)
df <- read.csv('specdata/100.csv', header = TRUE)
df
colnames(df)
df$sulfate
colnames(df)
cor(df$sulfate, df$nitrate)
complete.cases(df)
df[complete.cases(df)]
df[,2:3][complete.cases(df)]
df[,2][complete.cases(df)]
df[,2:3][complete.cases(df)]
cor(df$sulfate, df$nitrate)
cor(df$sulfate, df$nitrate, na.rm  = TRUE)
cor(df$sulfate, df$nitrate,na.rm  = TRUE)
cor(df$sulfate, df$nitrate, use=complete.obs)
cor(df$sulfate, df$nitrate, use='complte.obs')
cor(df$sulfate, df$nitrate, use ='complte.obs')
cor(df)
cor(c(df$sulfate,df$nitrate))
cor(df$sulfate,df$nitrate)
complete.cases(df$sulfate,df$nitrate)
pred <- complete.cases(df$sulfate,df$nitrate)
dfdf
df
df[,2:3]
df[,2:3][pred]
df[[,2:3][pred]]
df[,2:3][[pred]]
df[[,2:3]==[pred]]
df[pred]
pred
df[[,2:3]
]
df[,2:3]
apply(df[,2:3],2,pred)
complete.cases(df$sulfate,df$nitrate)
df$nitrate[pred]
edit(df)
df$nitrate[pred]
x <- df$nitrate[pred]
y <- df$sulfate[pred]
cor(x,y)
apply?
?apply
?apply
apply(df,2,cor)
apply(df,2,print)
new <-na.omit(df)
new
apply(df,2,cor)
new2 <- new[,2:3]
apply(new2,2,cor)
sapply(new2,cor)
x
u
y
cor(x,y)
cor(c(c,y)
)
na.omit(df)
df
na.ommit(df)
na.omit(df)
source('complete.R','getmonitor.R')
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
lookup.nobs <- complete('specdata')      #create lookup table of ids and complete cases; colnames = id,nobs
predicate <- lookup.nobs$nobs > threshold
id <- lookup.nobs$id[predicate]       # select id from lookup.nob where nobs > threshold (returns vector)
corrs <- {}                          # instantiate an empty vector
for (i in id) {
df <- getmonitor(i,directory)
clean.df <- na.omit(df)
i.corr <- cor(clean.df$sulfate,clean.df$nitrate)
corrs <- c(corrs,i.corr)
}
return(corrs)
}
corr(500)
corr('specdata')
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
corr.testscript()
source('complete.R','getmonitor.R')
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
lookup.nobs <- complete('specdata')      #create lookup table of ids and complete cases; colnames = id,nobs
predicate <- lookup.nobs$nobs > threshold
id <- lookup.nobs$id[predicate]       # select id from lookup.nob where nobs > threshold (returns vector)
corrs <- {}                          # instantiate an empty vector
for (i in id) {
df <- getmonitor(id = i,directory = directory)
clean.df <- na.omit(df)
i.corr <- cor(clean.df$sulfate,clean.df$nitrate)
corrs <- c(corrs,i.corr)
}
return(corrs)
}
corr.testscript()
source('complete.R')
source('getmonitor.R')
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
lookup.nobs <- complete('specdata')      #create lookup table of ids and complete cases; colnames = id,nobs
predicate <- lookup.nobs$nobs > threshold
id <- lookup.nobs$id[predicate]       # select id from lookup.nob where nobs > threshold (returns vector)
corrs <- {}                          # instantiate an empty vector
for (i in id) {
df <- getmonitor(id = i,directory = directory)
clean.df <- na.omit(df)
i.corr <- cor(clean.df$sulfate,clean.df$nitrate)
corrs <- c(corrs,i.corr)
}
return(corrs)
}
corr.testscript()
setwd("~/coursera/stats1/week2")
read.table('https://spark-public.s3.amazonaws.com/stats1/datafiles/Stats1.13.HW.02.txt')
read.table('http
://spark-public.s3.amazonaws.com/stats1/datafiles/Stats1.13.HW.02.txt')
read.table('Stats1.13.HW.02.txt')
read.table('Stats1.13.HW.02.txt', header = T)
df <- read.table('Stats1.13.HW.02.txt', header = T)
nrow(df)
ncol(df)
dim(r)
dim(df)
head(df)
View(df)
View(df)
mean(sr)
mean(sr)
mean(df$sr)
df$sr
df$SR
mean(df$SR)
var(df$SR)
colnames(df)
head(df)
df$time == 'pre'
pred <- df$time == 'pre'
mean(df$SR[pred])
pred <- df$time == 'post'
sd(df$SR[pred])
median(df$SR[pred])
head(df)
describe(df)
describeBy(df, df$time)
View(df)
View(df)
df[pred]
post <- subset(df, df$time =='post')
post
describe.by(post,post$condition)
describeBy(post,post$condition)
colnames(df)
head(df)
df <- read.table('Stats1.13.HW.02.txt', header = T)
#1: how many rows are in the data file?
#answer:
dim(df)
# = 96
#2: What is the dependent variable?
#SR
#3: what is the mean SR across all subjects
mean(df$SR)
#question 9 which is the best approx of normal distribution
par(mfrow = c(2,3)) # To view 6 histograms on one page
pre <- df$time =='pre'
post <- df$time = 'post'
post <- df$time == 'post'
df_pre <- subset(df,pre)
df_post <- subset(df,post)
head(df)
df_pre$conidtion =='WM'
df_pre
df_pre$condition == 'WM'
df$condition[df_pre$condition == 'WM']
df$SR[df_pre$condition == 'WM']
hist(df$SR[df_pre$condition == 'WM'])
hist(df$SR[df_pre$condition == 'WM'])
hist(df$SR[df_post$condition == 'WM'])
hist(df$SR[df_pre$condition == 'PE'])
hist(df$SR[df_post$condition == 'PE'])
hist(df$SR[df_pre$condition == 'DS'])
hist(df$SR[df_post$condition == 'DS'])
hist(df_post$SR[df_post$condition == 'WM'])
hist(df_pre$SR[df_pre$condition == 'PE'])
hist(df_post$SR[df_post$condition == 'PE'])
hist(df_pre$SR[df_pre$condition == 'DS'])
hist(df_post$SR[df_post$condition == 'DS'])
hist(df_pre$SR[df_pre$condition == 'WM'])
hist(df_post$SR[df_post$condition == 'WM'])
hist(df_pre$SR[df_pre$condition == 'PE'])
hist(df_post$SR[df_post$condition == 'PE'])
hist(df_pre$SR[df_pre$condition == 'DS'])
hist(df_post$SR[df_post$condition == 'DS'])
par(mfrow = c(2,3))
hist(df_pre$SR[df_pre$condition == 'WM'])
hist(df_post$SR[df_post$condition == 'WM'])
hist(df_pre$SR[df_pre$condition == 'PE'])
hist(df_post$SR[df_post$condition == 'PE'])
hist(df_pre$SR[df_pre$condition == 'DS'])
hist(df_post$SR[df_post$condition == 'DS'])
par(mfrow = c(2,3))
hist(df_pre$SR[df_pre$condition == 'WM'])
hist(df_post$SR[df_post$condition == 'WM'])
hist(df_pre$SR[df_pre$condition == 'PE'])
hist(df_post$SR[df_post$condition == 'PE'])
hist(df_pre$SR[df_pre$condition == 'DS'])
hist(df_post$SR[df_post$condition == 'DS'])
