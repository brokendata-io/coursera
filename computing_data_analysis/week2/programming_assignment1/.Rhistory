ZABBZB,-2,3,1,1,-2,1
ZAFAAA,-2,3,0,3,3,1
ZAFAAB,-2,3,0,3,3,1
ZAFABA,-2,3,0,3,1,1
ZAFABB,-2,3,0,3,1,1
ZAFAFA,-2,3,0,3,0,1
ZAFAFB,-2,3,0,3,0,1
ZAFAZA,-2,3,0,3,-2,1
ZAFAZB,-2,3,0,3,-2,1
ZAFBAA,-2,3,0,1,3,1
ZAFBAB,-2,3,0,1,3,1
ZAFBBA,-2,3,0,1,1,1
ZAFBBB,-2,3,0,1,1,1
ZAFBFA,-2,3,0,1,0,1
ZAFBFB,-2,3,0,1,0,1
ZAFBZA,-2,3,0,1,-2,1
ZAFBZB,-2,3,0,1,-2,1
ZAZAAA,-2,3,-2,3,3,1
ZAZAAB,-2,3,-2,3,3,1
ZAZABA,-2,3,-2,3,1,1
ZAZABB,-2,3,-2,3,1,1
ZAZAFA,-2,3,-2,3,0,1
ZAZAFB,-2,3,-2,3,0,1
ZAZAZA,-2,3,-2,3,-2,1
ZAZAZB,-2,3,-2,3,-2,1
ZAZBAA,-2,3,-2,1,3,1
ZAZBAB,-2,3,-2,1,3,1
ZAZBBA,-2,3,-2,1,1,1
ZAZBBB,-2,3,-2,1,1,1
ZAZBFA,-2,3,-2,1,0,1
ZAZBFB,-2,3,-2,1,0,1
ZAZBZA,-2,3,-2,1,-2,1
ZAZBZB,-2,3,-2,1,-2,1
ZBAAAA,-2,1,3,3,3,1
ZBAAAB,-2,1,3,3,3,1
ZBAABA,-2,1,3,3,1,1
ZBAABB,-2,1,3,3,1,1
ZBAAFA,-2,1,3,3,0,1
ZBAAFB,-2,1,3,3,0,1
ZBAAZA,-2,1,3,3,-2,1
ZBAAZB,-2,1,3,3,-2,1
ZBABAA,-2,1,3,1,3,1
ZBABAB,-2,1,3,1,3,1
ZBABBA,-2,1,3,1,1,1
ZBABBB,-2,1,3,1,1,1
ZBABFA,-2,1,3,1,0,1
ZBABFB,-2,1,3,1,0,1
ZBABZA,-2,1,3,1,-2,1
ZBABZB,-2,1,3,1,-2,1
ZBBAAA,-2,1,1,3,3,1
ZBBAAB,-2,1,1,3,3,1
ZBBABA,-2,1,1,3,1,1
ZBBABB,-2,1,1,3,1,1
ZBBAFA,-2,1,1,3,0,1
ZBBAFB,-2,1,1,3,0,1
ZBBAZA,-2,1,1,3,-2,1
ZBBAZB,-2,1,1,3,-2,1
ZBBBAA,-2,1,1,1,3,1
ZBBBAB,-2,1,1,1,3,1
ZBBBBA,-2,1,1,1,1,1
ZBBBBB,-2,1,1,1,1,1
ZBBBFA,-2,1,1,1,0,1
ZBBBFB,-2,1,1,1,0,1
ZBBBZA,-2,1,1,1,-2,1
ZBBBZB,-2,1,1,1,-2,1
ZBFAAA,-2,1,0,3,3,1
ZBFAAB,-2,1,0,3,3,1
ZBFABA,-2,1,0,3,1,1
ZBFABB,-2,1,0,3,1,1
ZBFAFA,-2,1,0,3,0,1
ZBFAFB,-2,1,0,3,0,1
ZBFAZA,-2,1,0,3,-2,1
ZBFAZB,-2,1,0,3,-2,1
ZBFBAA,-2,1,0,1,3,1
ZBFBAB,-2,1,0,1,3,1
ZBFBBA,-2,1,0,1,1,1
ZBFBBB,-2,1,0,1,1,1
ZBFBFA,-2,1,0,1,0,1
ZBFBFB,-2,1,0,1,0,1
ZBFBZA,-2,1,0,1,-2,1
ZBFBZB,-2,1,0,1,-2,1
ZBZAAA,-2,1,-2,3,3,1
ZBZAAB,-2,1,-2,3,3,1
ZBZABA,-2,1,-2,3,1,1
ZBZABB,-2,1,-2,3,1,1
ZBZAFA,-2,1,-2,3,0,1
ZBZAFB,-2,1,-2,3,0,1
ZBZAZA,-2,1,-2,3,-2,1
ZBZAZB,-2,1,-2,3,-2,1
ZBZBAA,-2,1,-2,1,3,1
ZBZBAB,-2,1,-2,1,3,1
ZBZBBA,-2,1,-2,1,1,1
ZBZBBB,-2,1,-2,1,1,1
ZBZBFA,-2,1,-2,1,0,1
ZBZBFB,-2,1,-2,1,0,1
ZBZBZA,-2,1,-2,1,-2,1
ZBZBZB,-2,1,-2,1,-2,1
ZFAAAA,-2,0,3,3,3,1
ZFAAAB,-2,0,3,3,3,1
ZFAABA,-2,0,3,3,1,1
ZFAABB,-2,0,3,3,1,1
ZFAAFA,-2,0,3,3,0,1
ZFAAFB,-2,0,3,3,0,1
ZFAAZA,-2,0,3,3,-2,1
ZFAAZB,-2,0,3,3,-2,1
ZFABAA,-2,0,3,1,3,1
ZFABAB,-2,0,3,1,3,1
ZFABBA,-2,0,3,1,1,1
ZFABBB,-2,0,3,1,1,1
ZFABFA,-2,0,3,1,0,1
ZFABFB,-2,0,3,1,0,1
ZFABZA,-2,0,3,1,-2,1
ZFABZB,-2,0,3,1,-2,1
ZFBAAA,-2,0,1,3,3,1
ZFBAAB,-2,0,1,3,3,1
ZFBABA,-2,0,1,3,1,1
ZFBABB,-2,0,1,3,1,1
ZFBAFA,-2,0,1,3,0,1
ZFBAFB,-2,0,1,3,0,1
ZFBAZA,-2,0,1,3,-2,1
ZFBAZB,-2,0,1,3,-2,1
ZFBBAA,-2,0,1,1,3,1
ZFBBAB,-2,0,1,1,3,1
ZFBBBA,-2,0,1,1,1,1
ZFBBBB,-2,0,1,1,1,1
ZFBBFA,-2,0,1,1,0,1
ZFBBFB,-2,0,1,1,0,1
ZFBBZA,-2,0,1,1,-2,1
ZFBBZB,-2,0,1,1,-2,1
ZFFAAA,-2,0,0,3,3,1
ZFFAAB,-2,0,0,3,3,1
ZFFAFA,-2,0,0,3,0,1
ZFFAFB,-2,0,0,3,0,1
ZFFAZA,-2,0,0,3,-2,1
ZFFAZB,-2,0,0,3,-2,1
ZFFBAA,-2,0,0,1,3,1
ZFFBAB,-2,0,0,1,3,1
ZFFBBA,-2,0,0,1,1,1
ZFFBBB,-2,0,0,1,1,1
ZFFBFA,-2,0,0,1,0,1
ZFFBFB,-2,0,0,1,0,1
ZFFBZA,-2,0,0,1,-2,1
ZFFBZB,-2,0,0,1,-2,1
ZFZAAA,-2,0,-2,3,3,1
ZFZAAB,-2,0,-2,3,3,1
ZFZABA,-2,0,-2,3,1,1
ZFZABB,-2,0,-2,3,1,1
ZFZAFA,-2,0,-2,3,0,1
ZFZAFB,-2,0,-2,3,0,1
ZFZAZA,-2,0,-2,3,-2,1
ZFZAZB,-2,0,-2,3,-2,1
ZFZBAA,-2,0,-2,1,3,1
ZFZBAB,-2,0,-2,1,3,1
ZFZBBA,-2,0,-2,1,1,1
ZFZBBB,-2,0,-2,1,1,1
ZFZBFA,-2,0,-2,1,0,1
ZFZBFB,-2,0,-2,1,0,1
ZFZBZA,-2,0,-2,1,-2,1
ZFZBZB,-2,0,-2,1,-2,1
ZZAAAA,-2,-2,3,3,3,1
ZZAAAB,-2,-2,3,3,3,1
ZZAABA,-2,-2,3,3,1,1
ZZAABB,-2,-2,3,3,1,1
ZZAAFA,-2,-2,3,3,0,1
ZZAAFB,-2,-2,3,3,0,1
ZZAAZA,-2,-2,3,3,-2,1
ZZAAZB,-2,-2,3,3,-2,1
ZZABAA,-2,-2,3,1,3,1
ZZABAB,-2,-2,3,1,3,1
ZZABBA,-2,-2,3,1,1,1
ZZABBB,-2,-2,3,1,1,1
ZZABFA,-2,-2,3,1,0,1
ZZABFB,-2,-2,3,1,0,1
ZZABZA,-2,-2,3,1,-2,1
ZZABZB,-2,-2,3,1,-2,1
ZZBAAA,-2,-2,1,3,3,1
ZZBAAB,-2,-2,1,3,3,1
ZZBABA,-2,-2,1,3,1,1
ZZBABB,-2,-2,1,3,1,1
ZZBAFA,-2,-2,1,3,0,1
ZZBAFB,-2,-2,1,3,0,1
ZZBAZA,-2,-2,1,3,-2,1
ZZBAZB,-2,-2,1,3,-2,1
ZZBBAA,-2,-2,1,1,3,1
ZZBBAB,-2,-2,1,1,3,1
ZZBBBA,-2,-2,1,1,1,1
ZZBBBB,-2,-2,1,1,1,1
ZZBBFA,-2,-2,1,1,0,1
ZZBBFB,-2,-2,1,1,0,1
ZZBBZA,-2,-2,1,1,-2,1
ZZBBZB,-2,-2,1,1,-2,1
ZZFAAA,-2,-2,0,3,3,1
ZZFAAB,-2,-2,0,3,3,1
ZZFABA,-2,-2,0,3,1,1
ZZFABB,-2,-2,0,3,1,1
ZZFAFA,-2,-2,0,3,0,1
ZZFAFB,-2,-2,0,3,0,1
ZZFAZA,-2,-2,0,3,-2,1
ZZFAZB,-2,-2,0,3,-2,1
ZZFBAA,-2,-2,0,1,3,1
ZZFBAB,-2,-2,0,1,3,1
ZZFBBA,-2,-2,0,1,1,1
ZZFBBB,-2,-2,0,1,1,1
ZZFBFA,-2,-2,0,1,0,1
ZZFBFB,-2,-2,0,1,0,1
ZZFBZA,-2,-2,0,1,-2,1
ZZFBZB,-2,-2,0,1,-2,1
ZZZAAA,-2,-2,-2,3,3,1
ZZZAAB,-2,-2,-2,3,3,1
ZZZABA,-2,-2,-2,3,1,1
ZZZABB,-2,-2,-2,3,1,1
ZZZAFA,-2,-2,-2,3,0,1
ZZZAFB,-2,-2,-2,3,0,1
ZZZAZA,-2,-2,-2,3,-2,1
ZZZAZB,-2,-2,-2,3,-2,1
ZZZBAA,-2,-2,-2,1,3,1
ZZZBAB,-2,-2,-2,1,3,1
ZZZBBA,-2,-2,-2,1,1,1
ZZZBBB,-2,-2,-2,1,1,1
ZZZBFA,-2,-2,-2,1,0,1
ZZZBFB,-2,-2,-2,1,0,1
ZZZBZA,-2,-2,-2,1,-2,1
ZZZBZB,-2,-2,-2,1,-2,1
file$p1
FBZBFZ,0,1,-2,1,0,1
history
file <- read.csv("~/file.csv")
View(file)
file$match_string
file$match_string(confidence_level > 9)
file[file$confidence_level>9]
file[file$p1>2]
file$p1
file[file$p1>1,]
file[file$p1>1,6]
file$match_string[file$confidence_level>9,]
file$match_string[file$confidence_level>9]
highString <- ifelse(file$confidence_level >9, "h", "l")
highString
nmewdata <- cbind(file,highString)
nmewdata
data= nmewdata
data
head(data)
data = data[,-match("highString")]
data = data[,-match("highString"), names(data)]
data = data[,-match("highString"), names(data))]
file = data[,-2]
file
data = file[,-7]
data
data
test = data$p1
test
data$match_string
data$p2
data$p2 + data$p3
data$p2 + data$p3 + data$p4 + data$p5
x <-data$p2 + data$p3 + data$p4 + data$p5
x
newdata = sbind(data,x)
x
newdata = cbind(data,x)
newdata
data = newdata
data
data$confidence_level
plot(data$confidence_level, data[,8])
data
data [,8]
data [,7]
plot(data$confidence_level, data[,7])
plot(data[,7], data$confidence)
plot(data$confidence_level, data[,7])
data [,7] * 3
data [,7] <- data[,7/2]
plot(data$confidence_level, data[,7])
boxplot(data$confidence_level, data[,7])
data [,7] <- data[,7*2]
data
head(data)
file <- read.csv("~/file.csv")
View(file)
data = file
data
x <- data$p1 + data$p2 + data$p3 + data$p4 + data$p5
x
test <- cbind(data,x)
test
test
data = test
data
summary(data)
data[,6:7]
data[,7:8]
out <-data[,7:8]
out
summary(out)
head(out)
plot(out$confidence_level, out$x)
data
test <- cbind(data$match_string,out)
test
out = test
out
source('getmonitor.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
final <- data.frame(id = integer(), nobs = integer())  # initialize an empty dataframe
for (i in id){
df <-getmonitor(id = i, directory)                  # getmonitor reads the file with the specified id and returns it as a dataframe
nobs <- sum(complete.cases(df))
final <- rbind(final, data.frame(id = i, nobs = nobs))
}
return(final)
}
setwd("~/coursera/computing_data_analysis/week2/programming_assignment1")
source('getmonitor.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
final <- data.frame(id = integer(), nobs = integer())  # initialize an empty dataframe
for (i in id){
df <-getmonitor(id = i, directory)                  # getmonitor reads the file with the specified id and returns it as a dataframe
nobs <- sum(complete.cases(df))
final <- rbind(final, data.frame(id = i, nobs = nobs))
}
return(final)
}
source('getmonitor.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
final <- data.frame(id = integer(), nobs = integer())  # initialize an empty dataframe
for (i in id){
df <-getmonitor(id = i, directory)                  # getmonitor reads the file with the specified id and returns it as a dataframe
nobs <- sum(complete.cases(df))
final <- rbind(final, data.frame(id = i, nobs = nobs))
}
return(final)
}
source('getmonitor.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
final <- data.frame(id = integer(), nobs = integer())  # initialize an empty dataframe
for (i in id){
df <-getmonitor(id = i, directory)                  # getmonitor reads the file with the specified id and returns it as a dataframe
nobs <- sum(complete.cases(df))
final <- rbind(final, data.frame(id = i, nobs = nobs))
}
return(final)
}
fix(complete)
complete()
complete(direcory ='specdata')
complete('specdata')
corr
cor?
?cor
?cor
source('complete.R')
source('getmonitor.R')
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
lookup.nobs <- complete('specdata')      #create lookup table of ids and complete cases; colnames = id,nobs
predicate <- lookup.nobs$nobs > threshold
id <- lookup.nobs$id[predicate]       # select id from lookup.nob where nobs > threshold (returns vector)
corrs <- {}                          # instantiate an empty vector
for (i in id) {
df <- getmonitor(id = i,directory = directory)
clean.df <- na.omit(df)
i.corr <- cor(clean.df$sulfate,clean.df$nitrate)
corrs <- c(corrs,i.corr)
}
return(corrs)
}
source('complete.R')
source('getmonitor.R')
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
lookup.nobs <- complete('specdata')      #create lookup table of ids and complete cases; colnames = id,nobs
predicate <- lookup.nobs$nobs > threshold
id <- lookup.nobs$id[predicate]       # select id from lookup.nob where nobs > threshold (returns vector)
corrs <- {}                          # instantiate an empty vector
for (i in id) {
df <- getmonitor(id = i,directory = directory)
clean.df <- na.omit(df)
i.corr <- cor(clean.df$sulfate,clean.df$nitrate)
corrs <- c(corrs,i.corr)
}
return(corrs)
}
corrs('specdata',threshold =800)
corr('specdata',threshold =800)
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <- 0
}
fix(pow)
library(datasets)
data(iris)
head(iris)
iris$Sepal.Length[iris$Species == 'virgincia']
iris$Sepal.Length
iris[iris$Species == 'virgincia']
iris[, 5] =="virgincia"
iris[, 4] =="virgincia"
View(iris)
View(iris)
iris[, 4] =="virginica"
iris[, 5] =="virginica"
iris$Sepal.Length[iris[, 5] =="virginica"]
z <- iris$Sepal.Length[iris[, 5] =="virginica"]
mean(z)
?apply
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
View(mtcars)
View(mtcars)
?tapply
?lapply
?sapply
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<- 10
f(3)
debug(ls)
ls
ls()
1
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
4
6
7
debug
debug()
